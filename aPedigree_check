//족보 검사 함수 aPedigree_check
// 5장의 카드 족보 검사
int aPedigree_check(Player& nowPlay, int R[], int S[], Player play) // 덱의 숫자R[] , 문양S[], Player 매개변수로 전달
{
    //먼저 배열 정렬
    arrsort(R, S, 5);

    int ptr1, ptr2;
    // 처음에 Pedigree를  High_card로 초기화
    int Pedigree = High_card;
    ptr1 = R[4];
    ptr2 = S[4];
    nowPlay.setMax(ptr1, ptr2);

    // pair 체크
    if ((R[0] == R[1]) || (R[1] == R[2]) || (R[2] == R[3]) || (R[3] == R[4]))
    {
        //one pair 검사
        if ((R[0] == R[1]) && (R[1] != R[2]) && (R[2] != R[3]) && (R[3] != R[4]))
        {
            Pedigree = One_pair;
            ptr1 = R[1];
            if (S[1] > S[0])
                ptr2 = S[1];
            if (S[1] < S[0])
                ptr2 = S[0];
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[1] == R[2]) && (R[0] != R[2]) && (R[2] != R[3]) && (R[3] != R[4]))
        {
            Pedigree = One_pair;
            ptr1 = R[2];
            if (S[2] > S[1])
                ptr2 = S[2];
            if (S[2] < S[1])
                ptr2 = S[1];
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[2] == R[3]) && (R[0] != R[1]) && (R[1] != R[3]) &&( R[3] != R[4]))
        {
            Pedigree = One_pair;
            ptr1 = R[3];
            if (S[2] > S[3])
                ptr2 = S[2];
            if (S[2] < S[3])
                ptr2 = S[3];
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[3] == R[4]) && (R[0] != R[1]) && (R[1] != R[2]) && (R[2] != R[4]))
        {
            Pedigree = One_pair;
            ptr1 = R[4];
            if (S[3] > S[4])
                ptr2 = S[3];
            if (S[3] < S[4])
                ptr2 = S[4];
            nowPlay.setMax(ptr1, ptr2);
        }

        // two pair  검사
        else if ((R[0] == R[1]) && (R[2] == R[3]) && (R[1] != R[3]) && (R[3] != R[4]))
        {
            Pedigree = Two_pair;
            ptr1 = R[3];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[0] == R[1]) && (R[3] == R[4]) && (R[1] != R[2]) && (R[2] != R[4]))
        {
            Pedigree = Two_pair;
            ptr1 = R[4];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[1] == R[2]) && (R[3] == R[4]) && (R[0] != R[2]) && (R[2] != R[4]))
        {
            Pedigree = Two_pair;
            ptr1 = R[4];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }

        //triple 체크
        else if ((R[0] == R[1]) && (R[1] == R[2]) && (R[2] != R[3]) && (R[3] != R[4]))
        {
            Pedigree = Triple;
            ptr1 = R[2];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[1] == R[2]) && (R[2] == R[3]) && (R[0] != R[3]) && (R[3] != R[4]))
        {
            Pedigree = Triple;
            ptr1 = R[3];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[2] == R[3]) && (R[3] == R[4]) && (R[0] != R[1]) && (R[1] != R[4]))
        {
            Pedigree = Triple;
            ptr1 = R[4];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }

        //full house 체크
        else if ((R[0] == R[1]) && (R[1] == R[2]) && (R[3] == R[4]) && (R[2] != R[4]))
        {
            Pedigree = Full_house;
            ptr1 = R[2];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2)
        }
        else if ((R[2] == R[3]) && (R[3] == R[4]) && (R[0] == R[1]) && (R[1] != R[4]))
        {
            Pedigree = Full_house;
            ptr1 = R[4];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2)
        }

        //four card 체크
        else if ((R[0] == R[1]) && (R[1] == R[2]) && (R[2] == R[3]))
        {
            Pedigree = Four_card;
            ptr1 = R[3];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }
        else if ((R[1] == R[2]) && (R[2] == R[3]) && (R[3] == R[4]))
        {
            ptr1 = R[4];
            ptr2 = 0;
            nowPlay.setMax(ptr1, ptr2);
        }
    }

    // flush 체크 (5카드 전부 같은 문양)
    if ((S[0] == S[1]) && (S[1] == S[2]) && (S[2] == S[3]) && (S[3] == S[4]))
    {
        Pedigree = Flush;
        ptr2 = S[4];
        ptr1 = R[4];
        nowPlay.setMax(ptr1, ptr2);
    }

    // straight 체크
    if ((R[1] == R[0] + 1) && (R[2] == R[1] + 1) && (R[3] == R[2] + 1) && (R[4] == R[3] + 1))
    {
        Pedigree = Straight;
        ptr1 = R[4];
        ptr2 = S[4];
        nowPlay.setMax(ptr1, ptr2);
    }

    //straight flush 체크 
    if (((R[1] == R[0] + 1) && (R[2] == R[1] + 1) && (R[3] == R[2] + 1) && (R[4] == R[3] + 1)) && ((S[0] == S[1]) && (S[1] == S[2]) && (S[2] == S[3]) && (S[3] == S[4])))
    {
        Pedigree = Straight_flush;
        ptr1 = R[4];
        ptr2 = S[4];
        nowPlay.setMax(ptr1, ptr2);
    }

    // 플레이어가 die 했을 경우
    if (play.checkPlay() == fasle)
    {
        pedigree = Die;
    }
    return Pedigree;
}
