//두명의 패 족보 서로 비교하는 함수
string pchecking(int pedigree1, int pedigree2, int amax_number, int amax_number2, int amax_pattern, int amax_pattern2, int bmax_number, int bmax_number2, int bmax_pattern, int bmax_pattern2)
{
	string winner;

	// 두 사람의 패 족보 등급이 다를 때
	if (pedigree1 > pedigree2)
		winner = "player1";
	else if (pedigree1 < pedigree2)
		winner = "player2";

	// 두 사람의 패 족보 등급이 같을 때
	else if (pedigree1 == pedigree2)
	{
		// highcard로 같을 때
		if (pedigree1 == High_card)
		{
			// maxnumber가 큰 사람이 winner
			if (amax_number > bmax_number)
				winner = "player 1";
			else if (amax_number < bmax_number)
				winner = "player 2";
			// maxnumber가 같으면 문양으로 승자 결정
			else if (amax_number == bmax_number)
			{
				if (amax_pattern > bmax_pattern)
					winner = "player 1";
				if (amax_pattern < bmax_pattern)
					winner = "player 2";
			}
		}

		// one pair 로 같을 때
		else if (pedigree1 == One_pair)
		{
			if (amax_number > bmax_number)
				winner = "player 1";
			else if (amax_number < bmax_number)
				winner = "player 2";
			else if (amax_number == bmax_number)
			{
				if (amax_pattern > bmax_pattern)
					winner = " player1";
				if (amax_pattern < bmax_pattern)
					winner = " player2";
				if (amax_pattern == bmax_pattern)
				{
					if (amax_number2 > bmax_number2)
						winner = "player1";
					if (amax_number2 < bmax_number2)
						winner = "player2";
					if (amax_number2 == bmax_number2)
					{
						if (amax_pattern2 > bmax_pattern2)
							winner = "player1";
						if (amax_pattern2 < bmax_pattern2)
							winner = "player2";
					}
				}
					
			}
		}

		// two pair 로 같을 때
		else if (pedigree1 == Two_pair)
		{
			if (amax_number > bmax_number)
				winner = "player1";
			else if (amax_number < bmax_number)
				winner = "player2";
			else if (amax_number == bmax_number)
			{
				if (amax_pattern > bmax_pattern)
					winner = "player1";
				if (amax_pattern < bmax_pattern)
					winner = "player2";
				if (amax_pattern == bmax_pattern)
				{
					if (amax_number2 > bmax_number2)
						winner = "player1";
					if (amax_number2 < bmax_number2)
						winner = "player2";
					if (amax_number2 == bmax_number2)
					{
						if (amax_pattern2 > bmax_pattern2)
							winner = "player1";
						if (amax_pattern2 < bmax_pattern2)
							winner = "player2";
					}
				}
			}
		}

		//두 패 모두 트리플 인 경우
		else if (pedigree1 == Triple)
		{
			if (amax_number > bmax_number)
				winner = "player1";
			else if (amax_number < bmax_number)
				winner = "player2";
		}

		//두 패 모두 스트레이트 인 경우
		else if (pedigree1 == Straight)
		{
			if (amax_number > bmax_number)
				winner = "player1";
			else if (amax_number < bmax_number)
				winner = "player2";
			else if (amax_number == bmax_number)
			{
				if (amax_pattern > bmax_pattern)
					winner = "player1";
				else if (amax_pattern < bmax_pattern)
					winner = "player2";
			}
		}

		// 두 패 모두 flush 인 경우
		else if (pedigree1 == Flush)
		{
			if (amax_pattern > bmax_pattern)
				winner = "player1";
			else if (amax_pattern < bmax_pattern)
				winner = "player2";
			else if (amax_pattern == bmax_pattern)
			{
				if (amax_number > bmax_number)
					winner = "player1";
				else if (amax_number < bmax_number)
					winner = "player2";
			}
		}

		// 두 패 모두 full house 인 경우
		else if (pedigree1 == Full_house)
		{
			if (amax_number > bmax_number)
				winner = "player1";
			if (amax_number < bmax_number)
				winner = "player2";
		}

		//두 패 모두 four card 인 경우
		else if (pedigree1 == Four_card)
		{
			if (amax_number > bmax_number)
				winner = "player1";
			else if (amax_number < bmax_number)
				winner = "player2";
		}

		//두 패 모두 straight flush 인 경우
		else if (pedigree1 == Straight_flush)
		{
			if (amax_number > bmax_number)
				winner = "player1";
			else if (amax_number < bmax_number)
				winner = "player2";
			else if (amax_number == bmax_number)
			{
				if (amax_pattern > bmax_pattern)
					winner = "player1";
				else if (amax_pattern < bmax_pattern)
					winner = "player2";
			}
		}
	}
	return winner;
}

int max_arr(int arr[])
{
	int max, i;

	max = arr[0];

	for (i = 1 ; i < 7 ; i++) {
		if (max < arr[i])
			max = arr[i];
	}
	return max;
}
